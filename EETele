/**
 * Created by Team 9386 on 9/27/2016.
 *
 * Updated and Rewritten 9/19/2017.
 *
 * TODO - 10-10: Change strafing to Triggers, scale speed,
 * TODO - 10-10: Code glyph grabbers on X and B buttons
 */
package org.firstinspires.ftc.teamcode;

//import com.qualcomm.robotcore.eventloop.opmode.Disabled;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

//import com.qualcomm.robotcore.hardware.DcMotor;


//import org.firstinspires.ftc.teamcode.HardwareEEbot;


@TeleOp(name="EEbot: Cap'sOp", group="EEbot") //this tells the new Driver Station (V11) which type of code this is.
//@Disabled
public class CapsOp extends OpMode {

    int x = 0;
    //ModernRoboticsTouchSensor touch = null;
    /* Declare OpMode members. */
    HardwareEEBot   robot           = new HardwareEEBot();// Use a EE bot hardware
    //double          armPosition     = robot.ARM_HOME;                   // Servo safe position
    //double          clawPosition    = robot.CLAW_HOME;                  // Servo safe position
    //final double    CLAW_SPEED      = 0.01 ;                            // sets rate to move servo
    //final double    ARM_SPEED       = 0.01 ;                            // sets rate to move servo
    final private double    STRAFE_SPEED     = 0.25;                // The constant speed to strafe

    private double strafingSpeed = 0;
    private double grabberLeftMin = 0.48;
    private double grabberLeftMax = 0.6;
    private double grabberRightMin = 0.25;
    private double grabberRightMax = 0.33;
    private double grabberLeftPos;
    private double grabberRightPos;

    private int leftCounts = 0;
    private int rightCounts = 0;

    private boolean xDown = false;
    private boolean aDown = false;
    private boolean bDown = false;
    private boolean toggleOverride = false; // The variable used to determine whether to set grabbers with x/a or y/b
    private boolean grabberLeftDown = false;
    private boolean grabberRightDown = false;
    private boolean grabberAllDown = false;
    boolean sweeperOn = false;

    /*
     * Code to run ONCE when the driver hits INIT
     */
    @Override
    public void init() {
        /* Initialize the hardware variables.
         * The init() method of the hardware class does all the work here
         */
        robot.init(hardwareMap);

        grabberLeftPos = robot.glyphGrabberLeft.getPosition();
        grabberRightPos = robot.glyphGrabberRight.getPosition();

        //touch = (ModernRoboticsTouchSensor)hardwareMap.touchSensor.get("touch");


        //robot.flipper.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        //robot.flipper.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Set the glyph grabbers from starting position to ready position
        //robot.glyphGrabberLeft.setPosition(0.5);
        /*try {
            wait(1000);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }

*/
        //wait(1000);

        //robot.glyphGrabberRight.setPosition(0.5);

        // Send telemetry message to signify robot waiting;
        telemetry.addData("Say", "Hello Driver");    //
        updateTelemetry(telemetry);
    }

    /*
     * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY
     */
    @Override
    public void init_loop() {
        init();
    }

    /*
     * Code to run ONCE when the driver hits PLAY22222222
     */
    @Override
    public void start() {
    }

    /*
     * Code to run REPEATEDLY after the driver hits PLAY but before they hit STOP
     */
    @Override
    public void loop() {

        // GAMEPAD 1 CONTROLS \\
        // If a bumper is down, strafe. Otherwise drive from left and right sticks

        if (gamepad1.left_trigger > 0.1) {
            // Strafe left
            strafingSpeed = scaleInput(gamepad1.left_trigger);

            telemetry.addData("Left bumper down!", strafingSpeed);
            // Front left and back right motors go forwards.
            robot.leftMotor.setPower(strafingSpeed * 0.75);
            robot.rMotor.setPower(strafingSpeed);

            // Front right and back left motors go backwards.
            robot.rightMotor.setPower(-strafingSpeed * 0.75);
            robot.lMotor.setPower(-strafingSpeed);
        }
        else if (gamepad1.right_trigger > 0.1){
            // Strafe right
            strafingSpeed = scaleInput(gamepad1.right_trigger);

            telemetry.addData("Right trigger down!", strafingSpeed);
            // Front right and back left motors go forwards.
            robot.rightMotor.setPower(strafingSpeed * 0.75);
            robot.lMotor.setPower(strafingSpeed );

            // Front left and back right motors go backwards.
            robot.leftMotor.setPower(-strafingSpeed * 0.75);
            robot.rMotor.setPower(-strafingSpeed);
        }
        else {
            // Apply motor control
            double rightPower = scaleInput(gamepad1.right_stick_y);
            double leftPower  = scaleInput(gamepad1.left_stick_y);

            telemetry.addData("rightPower", rightPower);
            telemetry.addData("leftPower", leftPower);
            // Set the two right motors to rightPower

            robot.rightMotor.setPower(rightPower/2);
            robot.rMotor.setPower(rightPower/2);

            // Set the two left motors to rightPower

            robot.leftMotor.setPower(leftPower/2);
            robot.lMotor.setPower(leftPower/2);
        }

        if (Math.abs(gamepad2.left_stick_y) > 0.1) {
            double spoolSpeed = scaleInput(gamepad2.left_stick_y);
            robot.spool.setPower(spoolSpeed);
        }
        else {
            robot.spool.setPower(0);
        }
        telemetry.update();


        if (gamepad1.y){
            robot.rMotor.setPower(-0.5);
            robot.rightMotor.setPower(-0.5);
            robot.leftMotor.setPower(-0.5);
            robot.lMotor.setPower(-0.5);
        }

        if (gamepad1.a){
            robot.rMotor.setPower(0.5);
            robot.rightMotor.setPower(0.5);
            robot.leftMotor.setPower(0.5);
            robot.lMotor.setPower(0.5);
        }


        if (gamepad2.dpad_up){
            robot.glyphGrabberLeft.setPosition(0.05);
            robot.glyphGrabberRight.setPosition(0.95);
        }

        if (gamepad2.dpad_down){
            robot.glyphGrabberLeft.setPosition(0.95);
            robot.glyphGrabberRight.setPosition(0.05);
        }

        // GAMEPAD 2 CONTROLS \\

        // MANUAL GRABBER ADJUST
        double currentLeftPos = robot.glyphGrabberLeft.getPosition();
        double currentRightPos = robot.glyphGrabberRight.getPosition();

        if (gamepad2.y){
            // Manually CLOSE the grabbers
            // Close left if it's not too far already
            if (currentLeftPos <= grabberLeftMin) {
                telemetry.addData("Grabber left not adjusted.", currentLeftPos);
                grabberLeftPos = grabberLeftMin;
            }
            else {
                telemetry.addData("Adjusting grabber left.", currentLeftPos);
                grabberLeftPos = currentLeftPos - 0.002;
            }

            // Close right if it's not too far already
            if (currentRightPos >= grabberRightMax) {
                telemetry.addData("Grabber right not adjusted.", currentRightPos);
                grabberRightPos = grabberRightMax;
            }
            else {
                telemetry.addData("Adjusting grabber right.", currentRightPos);
                grabberRightPos = currentRightPos + 0.002;
            }
        }
        else if (gamepad2.b) {
            // Manually RELEASE the grabbers

            // Close left if it's not too far already
            if (currentLeftPos >= grabberLeftMax) {
                telemetry.addData("Grabber left not adjusted.", currentLeftPos);
                grabberLeftPos = grabberLeftMax;
            }
            else {
                telemetry.addData("Adjusting grabber left.", currentLeftPos);
                grabberLeftPos = currentLeftPos + 0.002;
            }

            // Close right if it's not too far already
            if (currentRightPos <= grabberRightMin) {
                telemetry.addData("Grabber right not adjusted.", currentRightPos);
                grabberRightPos = grabberRightMin;
            }
            else {
                telemetry.addData("Adjusting grabber right.", currentRightPos);
                grabberRightPos = currentRightPos - 0.002;
            }
        }

        // TOGGLE GRABBERS
        if (gamepad2.x){
            if (!xDown){
                grabberLeftDown = !grabberLeftDown;
                xDown = true;
                if (grabberLeftDown) {
                    grabberLeftPos = grabberLeftMin;
                }
                else {
                    grabberLeftPos = grabberLeftMax;
                }
            }
        }
        else {
            xDown = false;
        }

        if (gamepad2.a){
            if (!aDown) {
                grabberRightDown = !grabberRightDown;
                aDown = true;
                if (grabberRightDown) {
                    grabberRightPos = grabberRightMin;
                }
                else {
                    grabberRightPos = grabberRightMax;
                }
            }
        }
        else{
            aDown = false;
        }

        if (gamepad2.right_bumper){
            if (!bDown) {
                grabberAllDown = !grabberAllDown;
                bDown = true;
                if (grabberAllDown) {
                    grabberRightPos = grabberRightMin;
                    grabberLeftPos = grabberLeftMin;
                }
                else {
                    grabberRightPos = grabberRightMax;
                    grabberLeftPos = grabberLeftMax;
                }
            }
        }
        else {
            bDown = false;
        }

        telemetry.update();

        // Logic to set the grabber positions
        //These are the right positions for the new REV servos
        robot.glyphGrabberLeft.setPosition(grabberLeftPos);
        robot.glyphGrabberRight.setPosition(grabberRightPos);
//        if (grabberLeftDown) {
//            robot.glyphGrabberLeft.setPosition(0.48);
//        }
//        else {
//            robot.glyphGrabberLeft.setPosition(0.70);
//        }
//
//        if (grabberRightDown){
//            robot.glyphGrabberRight.setPosition(0.33);
//        }
//        else {
//            robot.glyphGrabberRight.setPosition(0.20);
//        }


        //else {                              // else do nothing
        //robot.secondBestServo.setPosition(0.51);
        //   robot.bestServo.setPosition(0.52);
        //


        //if (gamepad1.dpad_left){
        //    robot.clicker.setPosition(0.50);
        //}

        //if (gamepad1.dpad_right){
        //   robot.clickerTwo.setPosition(0.50);
        //}

        //if (gamepad1.left_bumper){
        //    robot.spool.setPower(-0.50);
        //}

        //if (gamepad1.right_bumper){
        //    robot.spool.setPower(0.50);
        //}



        //if (gamepad1.a) {

        //  robot.flipper.setPower(1);
        //robot.flipper.setTargetPosition(1440); //setting target value for flipper

        //} else {
        //  robot.flipper.setPower(0);
        //}


        //else if (gamepad1.a) {            // if a is pressed, full power backward

        //motorRight.setPower(1.00);
        //  motorLeft.setPower(-1.00);

        //}

        Thread.yield();
    }


    double scaleInput(double dVal)  {
//        double[] scaleArray = { 0.0, 0.05, 0.09, 0.10, 0.12, 0.15, 0.18, 0.24,
//                0.30, 0.36, 0.43, 0.50, 0.60, 0.72, 0.85, 1.00, 1.00 };
        double[] scaleArray = { 0.0, 0.05, 0.09, 0.10, 0.12, 0.15, 0.18, 0.24,
              0.30, 0.36, 0.43, 0.50, 0.60, 0.72, 0.85, 1.00, 1.00 };

        // get the corresponding index for the scaleInput array.
        int index = (int) (dVal * 16.0);

        // index should be positive.
        if(index < 0){
            index = -index;
        }


        // index cannot exceed size of array minus 1.
        if (index > 16) {
            index = 16;
        }

        // get value from the array.
        double dScale = 0.0;
        if (dVal < 0) {
            dScale = -scaleArray[index];
        } else {
            dScale = scaleArray[index];
        }

        // return scaled value.
        return dScale;
    }
}
