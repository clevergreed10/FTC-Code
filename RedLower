/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.Range;

import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.RelicRecoveryVuMark;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackable;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackables;

/**
 * {@link } gives a short demo on how to use the BNO055 Inertial Motion Unit (IMU) from AdaFruit.
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 *
 * @see <a href="http://www.adafruit.com/products/2472">Adafruit IMU</a>
 */
@Autonomous(name = "RedLower", group = "Blue")
//@Disabled                            // Comment this out to add to the opmode list
public class RedLower extends LinearOpMode
{
    //----------------------------------------------------------------------------------------------
    // State
    //----------------------------------------------------------------------------------------------

    HardwareEEBot robot = new HardwareEEBot();

    // AutonomousCommands driveModule = new AutonomousCommands();

    //vuforia is the variable we will use to store our instance of the Vuforia localization engine.
    VuforiaLocalizer vuforia;
    VuforiaTrackable relicTemplate;

    final int BLUE = 0;
    final int RED  = 1;
    final int LEFT   = -1;
    final int CENTER = -2;
    final int RIGHT  = -3;
    private TeamColor TEAMCOLOR = TeamColor.RED;

    final double TURN_SPEED = 0.2;
    final double DRIVE_SPEED = 0.25;

    private double grabberLeftMin = 0.48;
    private double grabberLeftMax = 0.6;
    private double grabberRightMin = 0.25;
    private double grabberRightMax = 0.33;

    // The IMU sensor object
    BNO055IMU imu;

    // State used for updating telemetry
    Orientation angles;
    Acceleration gravity;

    DcMotor leftMotor   = null;
    DcMotor rightMotor  = null;
    DcMotor lMotor   = null;
    DcMotor rMotor  = null;

    /*Servo jewelArm = null;
    Servo glyphGrabberLeft = null;
    Servo glyphGrabberRight = null;

    ColorSensor jewelSensorColor;*/


    //----------------------------------------------------------------------------------------------
    // Main logic
    //----------------------------------------------------------------------------------------------

    @Override public void runOpMode() {



        Boolean score = true;

        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        VuforiaLocalizer.Parameters vuforiaParameters = new VuforiaLocalizer.Parameters(cameraMonitorViewId);

        // OR...  Do Not Activate the Camera Monitor View, to save power
        // VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();

        // Joshua's license key
        vuforiaParameters.vuforiaLicenseKey = "AdLORsH/////AAAAGSk7H7mSvUJng/rqnN96DDJxBj6Ir4uum2FxifkokX51jW5AIEmws+YcGEoLywmIHtl1ajCqCfQ1tIjgRVhYlFbYasGMvweedEqPzlifXfLf6uFwPKN82+OT/JpKhtJr7n6LTvh5EQERs9eDByNvprWy0vqb5CEUszHs4WA2zrsS7occZN6MLIQXSBlArbnWAGr879iJb6Toed/6TLgIrzDkH1mTiLmJ7ANsHoNkazcQeC+pvtfdylzd7n3Azds1+wo1X0CmM6o4vw2e31DslsnJNLHLxCWpWArSVHKrvPJS75jDUeHiyoi4qlOm3R2S8nElj94EIJ69R66Ofk0gxM2F/10Juk+z9p0UQ5jaYAU0";
        // Chose which camera to use
        vuforiaParameters.cameraDirection = VuforiaLocalizer.CameraDirection.FRONT;
        this.vuforia = ClassFactory.createVuforiaLocalizer(vuforiaParameters);
        /*
         * Load the data set containing the VuMarks for Relic Recovery. There's only one trackable
         * in this data set: all three of the VuMarks in the game were created from this one template,
         * but differ in their instance id information.
         * @see VuMarkInstanceId
         */
        VuforiaTrackables relicTrackables = this.vuforia.loadTrackablesFromAsset("RelicVuMark");
        relicTemplate = relicTrackables.get(0);
        relicTemplate.setName("relicVuMarkTemplate"); // can help in debugging; otherwise not necessary

        relicTrackables.activate();
        // Wait until we're told to go
        robot.init(hardwareMap);

        waitForStart();

        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit           = BNO055IMU.AngleUnit.DEGREES;
        parameters.accelUnit           = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
        parameters.calibrationDataFile = "BNO055IMUCalibration.json"; // see the calibration sample opmode
        parameters.loggingEnabled      = true;
        parameters.loggingTag          = "IMU";
        parameters.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();

        // Retrieve and initialize the IMU. We expect the IMU to be attached to an I2C port
        // on a Core Device Interface Module, configured to be a sensor of type "AdaFruit IMU",
        // and named "imu".
        imu = robot.imu;
        imu.initialize(parameters);

        //hotfix
        rightMotor = robot.motorFR;
        rMotor     = robot.motorBR;
        leftMotor  = robot.motorFL;
        lMotor     = robot.motorBL;

        robot.spool.setPower(-0.5);
        sleep(600);
        robot.spool.setPower(0);

        int pictoKey = 0; //findPictograph(1);
        TeamColor jewelColor = jewelRun();

        if (jewelColor == TEAMCOLOR) { // Jewel is our team color drive forward
            score = gyroDrive(0, -0.3, 100, 2.0);
            // Distance is NOT in inches, we need to measure encoder counts to inches
            telemetry.addData("Jewel Color", " is our color!");
            telemetry.update();
            sleep(1000);
            pictoKey = findPictograph(2);
            robot.jewelArm.setPosition(0.5);
            sleep(500); // Ensure the arm
            score = gyroDrive(0, 0.3, 175, 1.0);

        }
        else if (jewelColor == TeamColor.NONE) { // We were unable to get the jewel color: ABORT MISSION
            telemetry.addData("Jewel Color", " is not a color!");
            telemetry.update();
            robot.jewelArm.setPosition(0.5);
            sleep(1000);
            //score = drive(0.3, 100, 1.0);
            score = gyroDrive(0, -0.3, 50, 1.0);
            pictoKey = findPictograph(2);
            sleep(250);
            score = gyroDrive(0, 0.3, 150, 1.0);
        }
        else { // Jewel is not our team color
            telemetry.addData("Jewel Color", " is not our color!");
            telemetry.update();
            score = gyroDrive(0, 0.3, 50, 1.0);
            sleep(1000);
            robot.jewelArm.setPosition(0.5);
            pictoKey = findPictograph(2);
            // Drive to the position we would be at if we had gone backwards
        }

        telemetry.addData("Prepare to drive!", "Backwards!");
        telemetry.update();
        sleep(1000); // For debug
        score = gyroDrive(0, 0.3, 2100, 5.0);
        sleep(1000);
        if (pictoKey == CENTER) {
            telemetry.addData("Pictokey is:", "Center");
            telemetry.update();
            sleep(1000);
            gyroDrive(0, DRIVE_SPEED, 400, 2.0);
            sleep(500);
        } else if (pictoKey == LEFT) {
            telemetry.addData("Pictokey is:", "Left");
            telemetry.update();
            sleep(1000);
            gyroDrive(0, DRIVE_SPEED, 900, 3.0);
            sleep(500);
        }
        gyroDrive(-80, -DRIVE_SPEED/2, 1300, 5.0);
        sleep(500);
        gyroDrive(-90, DRIVE_SPEED, 700, 3.0);
        sleep(250);
        changeIntakeDirection(Direction.OUT, Direction.DOWN);
        changeIntakeDirection(Direction.OUT, Direction.UP);
        sleep(500);
        gyroDrive(-90, -DRIVE_SPEED, 500, 2.0); // Finished pushing out the glyphs, back up
        changeIntakeDirection(Direction.NONE, Direction.DOWN);
        changeIntakeDirection(Direction.NONE, Direction.UP);
        sleep(500);
        gyroDrive(90, -DRIVE_SPEED, 2800, 5.0); // Turn around to face the glyph pit
        sleep(500);
        changeIntakeDirection(Direction.IN, Direction.DOWN);
        changeIntakeDirection(Direction.IN, Direction.UP);
        gyroDrive(90, DRIVE_SPEED, 3000, 6.0); // Drive into the glyph pit
        sleep(1000);
        changeIntakeDirection(Direction.NONE, Direction.DOWN);
        changeIntakeDirection(Direction.NONE, Direction.UP);
        gyroDrive(90, -DRIVE_SPEED, 2500, 5.0); // Back up to the glyph container
        sleep(500);
        gyroDrive(-90, -DRIVE_SPEED, 2800, 5.0);
        sleep(500);
        gyroDrive(-90, DRIVE_SPEED, 700, 3.0); // Drive into the glyph column
        sleep(250);
        changeIntakeDirection(Direction.OUT, Direction.DOWN);
        changeIntakeDirection(Direction.OUT, Direction.UP);
        sleep(500);
        gyroDrive(-90, -DRIVE_SPEED, 3000, 6.0);

    }

    public TeamColor jewelRun() {
        robot.jewelArm.setPosition(0.075);
        sleep(3000);
        telemetry.addData("Red: ", robot.jewelSensorColor.red());
        telemetry.addData("Blue: ", robot.jewelSensorColor.blue());
        telemetry.update();
        if (robot.jewelSensorColor.red() > 1 && robot.jewelSensorColor.red() > robot.jewelSensorColor.blue()) {
            // Direct ball is red
            return TeamColor.RED;
        }
        else if (robot.jewelSensorColor.blue() > 1 && robot.jewelSensorColor.blue() > robot.jewelSensorColor.red()) {
            // Direct ball is blue
            return TeamColor.BLUE;
        }
        else {
            return TeamColor.NONE;
        }
    }


    /*
    Drive by gyro function, drives the robot a given length keeping within a certain angle
    targetAngle: The angle we wish to stay on
    speed: The speed of the motors. Unlike last year, -speed means you go backwards.
    distance: The length we wish to travel
     */
    public Boolean gyroDrive(double targetAngle, double speed, int distance, double timeout) {
        // Set the motors to measure encoder counts.
        rightMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        rMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        leftMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        lMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        int startRPos = rightMotor.getCurrentPosition();
        int startLPos = leftMotor.getCurrentPosition();
        double startTime = time;

        speed = Range.clip(-speed, -1, 1);
        // Start the loop. Even if we're going backwards, math.abs makes sure that we can still compare to distance.
        while (opModeIsActive() && (Math.abs(rightMotor.getCurrentPosition() -startRPos) < distance) && (Math.abs(leftMotor.getCurrentPosition() -startLPos) < distance)) {
            if (time > startTime + timeout) {
                telemetry.addData("Last drive stop:", "Timeout!");
                break;
            }

            Orientation orientation = imu.getAngularOrientation(AxesReference.EXTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES);
            // angles                  = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            double error = ((orientation.thirdAngle > 180 ? orientation.thirdAngle - 360 : orientation.thirdAngle) - targetAngle) / (25.0);
            error = Range.clip(error, -1, 1);
            telemetry.addData("motorleft dist:", leftMotor.getCurrentPosition() - startLPos);
            telemetry.addData("motorright dist:", rightMotor.getCurrentPosition() - startRPos);
            telemetry.addData("Current z orientation:", orientation.thirdAngle);
            telemetry.addData("error", error);
            telemetry.update();
            double right = speed + error;
            double left = speed - error;

            double max = Math.max(Math.abs(right), Math.abs(left));

            if (max > 1.0) {
                left /= max;
                right /= max;
            }

            rightMotor.setPower(right);
            rMotor.setPower(right);
            leftMotor.setPower(left);
            lMotor.setPower(left);
        }

        telemetry.addData("Last drive stop:", "Loop complete!");
        rightMotor.setPower(0.0);
        rMotor.setPower(0.0);
        leftMotor.setPower(0.0);
        lMotor.setPower(0.0);

        rightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        lMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        return (time < startTime + timeout);
    }



    /*
    Function find get the pictograph value at the start of autonomous
    timeout is the max amount of seconds we can be searching for the cipher. CENTER will be returned if it is not found.
    */
    private int findPictograph(double timeout) {
        double startTime = time;

        while (opModeIsActive()) {
            if (time > startTime + timeout) {
                break;
            }

            /**
             * See if any of the instances of {@link relicTemplate} are currently visible.
             * {@link RelicRecoveryVuMark} is an enum which can have the following values:
             * UNKNOWN, LEFT, CENTER, and RIGHT. When a VuMark is visible, something other than
             * UNKNOWN will be returned by {@link RelicRecoveryVuMark#from(VuforiaTrackable)}.
             */
            RelicRecoveryVuMark vuMark = RelicRecoveryVuMark.from(relicTemplate);
            if (vuMark != RelicRecoveryVuMark.UNKNOWN) {

                // Found an instance of the template.
                telemetry.addData("VuMark", "%s visible", vuMark);
                if (vuMark == RelicRecoveryVuMark.LEFT) {
                    return LEFT;
                }
                else if (vuMark == RelicRecoveryVuMark.CENTER) {
                    return CENTER;
                }
                else if (vuMark == RelicRecoveryVuMark.RIGHT) {
                    return RIGHT;
                }
            }
            else {
                telemetry.addData("VuMark", "not visible");
            }
            telemetry.update();
        }
        telemetry.addData("Cipher not found", CENTER);
        telemetry.update();
        return CENTER; // No vumark was found within the timeout period, so we'll just return center (1/3 chance of getting it right)
    }

    public void changeIntakeDirection(Direction spinDirection, Direction intakePair) {

        if (intakePair == Direction.DOWN) {
            if (spinDirection == Direction.IN) {
                robot.BL_Intake.setPosition(1);
                robot.BR_Intake.setPosition(0);
            } else if (spinDirection == Direction.OUT) {
                robot.BL_Intake.setPosition(0);
                robot.BR_Intake.setPosition(1);
            } else {
                robot.BL_Intake.setPosition(0.5);
                robot.BR_Intake.setPosition(0.5);
            }
        }
        else if (intakePair == Direction.UP) {
            if (spinDirection == Direction.IN) {
                robot.UL_Intake.setPosition(0);
                robot.UR_Intake.setPosition(1);
            } else if (spinDirection == Direction.OUT) {
                robot.UL_Intake.setPosition(1);
                robot.UR_Intake.setPosition(0);
            } else {
                robot.UL_Intake.setPosition(0.5);
                robot.UR_Intake.setPosition(0.5);
            }
        }
    }

}
