/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorController;
import com.qualcomm.robotcore.util.Range;

import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.Func;
import org.firstinspires.ftc.robotcore.external.matrices.OpenGLMatrix;
import org.firstinspires.ftc.robotcore.external.matrices.VectorF;
import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import org.firstinspires.ftc.robotcore.external.navigation.RelicRecoveryVuMark;
import org.firstinspires.ftc.robotcore.external.navigation.Velocity;
import org.firstinspires.ftc.robotcore.external.navigation.VuMarkInstanceId;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackable;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackableDefaultListener;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackables;

import java.util.Locale;

/**
 * {@link Autonomous} gives a short demo on how to use the BNO055 Inertial Motion Unit (IMU) from AdaFruit.
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 *
 * @see <a href="http://www.adafruit.com/products/2472">Adafruit IMU</a>
 */
@com.qualcomm.robotcore.eventloop.opmode.Autonomous(name = "Sensor: BNO055 IMU", group = "Sensor")
@Disabled                            // Comment this out to add to the opmode list
public class Autonomous extends LinearOpMode {
    //----------------------------------------------------------------------------------------------
    // State
    //----------------------------------------------------------------------------------------------


    HardwareEEBot robot = new HardwareEEBot();

    // The IMU sensor object
    BNO055IMU imu;

    // State used for updating telemetry
    Orientation angles;
    Acceleration gravity;

    OpenGLMatrix lastLocation = null;

    //vuforia is the variable we will use to store our instance of the Vuforia localization engine.

    VuforiaLocalizer vuforia;
    VuforiaTrackable relicTemplate;


    final int BLUE = 0;
    final int RED  = 1;

    final int LEFT   = -1;
    final int CENTER = -2;
    final int RIGHT  = -3;

    private int TEAMCOLOR = BLUE; // Blue for debug purposes, will eventually be null initially and set by a button

    //----------------------------------------------------------------------------------------------
    // Main logic
    //----------------------------------------------------------------------------------------------

    @Override public void runOpMode() {
/*
         * To start up Vuforia, tell it the view that we wish to use for camera monitor (on the RC phone);
         * If no camera monitor is desired, use the parameterless constructor instead (commented out below).
         * We will probably turn off monitor once we get vuforia down.
         */
        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters(cameraMonitorViewId);

        // OR...  Do Not Activate the Camera Monitor View, to save power
        // VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();

        // IMPORTANT: GET UPDATED LICENSE KEY!!!!
        parameters.vuforiaLicenseKey = "AUo9rlT/////AAAAGe2zjReuIEMDtC0KIDm3i7s8yaOmjF2DN7T97zzidTTkwq4JVwJxpvmN7s3ypFxLXMQSCTW/j33tTITrCwe/u0825T6jAEjJahSwL8wt1kVRW1kLD+Un+6V8QKmT/j1MGi8iq1lMxlEiXVwK/AcdfLOtKZVbFdKJ9Sh39eGPwWI0CTYfralUCM6nPAmLgo4rV3+RfEpLpFtFU49keW3190y88z+sYCRsUfwdIo5RLmVZgl+5V41QR0QUcVBsP43OcJJhjd7cvIs9HoiW2feL8W3+pgNefdPNNSKjzbOZHGV5/4mH1bhP0JMeKl0N++1EBvm8ZGVhnNfWxwRzJNmmQuEELfXFRaHQQi5RQdvvWp0Z";

        /*
         * We also indicate which camera on the RC that we wish to use.
         * Here we chose the back (HiRes) camera (for greater range), but
         * for a competition robot, the front camera might be more convenient.
         */
        parameters.cameraDirection = VuforiaLocalizer.CameraDirection.BACK;
        this.vuforia = ClassFactory.createVuforiaLocalizer(parameters);

        /**
         * Load the data set containing the VuMarks for Relic Recovery. There's only one trackable
         * in this data set: all three of the VuMarks in the game were created from this one template,
         * but differ in their instance id information.
         * @see VuMarkInstanceId
         */
        VuforiaTrackables relicTrackables = this.vuforia.loadTrackablesFromAsset("RelicVuMark");
        relicTemplate = relicTrackables.get(0);
        relicTemplate.setName("relicVuMarkTemplate"); // can help in debugging; otherwise not necessary

        relicTrackables.activate();
    }

    // Function to lower the jewel arm and sense the color
    // Returning true means to drive forward (direction of color sensor)
    // Returning false means the opposite
    boolean jewelRun() {

        robot.jewelArm.setPosition(1.0);

        telemetry.addData("Red: ", robot.jewelSensorColor.red());
        telemetry.addData("Blue: ", robot.jewelSensorColor.blue());
        telemetry.update();
        if (robot.jewelSensorColor.red() > 1) {
            // Direct ball is red
            if (TEAMCOLOR == RED) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            // Direct ball is blue, opposite ball is red
            if (TEAMCOLOR == RED) {
                return false;
            } else {
                return true;
            }
        }
    }

    // Basic drive function
    public boolean drive (double rightSpeed, double leftSpeed, double distance, double timeout) throws InterruptedException {
        int startRPos = robot.rightMotor.getCurrentPosition();
        int startLPos = robot.leftMotor.getCurrentPosition();
        double startTime = time;

        while (Math.abs(robot.rightMotor.getCurrentPosition() -startRPos) + Math.abs(robot.leftMotor.getCurrentPosition() -startLPos) < distance) {
            if (time > startTime + timeout) {
                telemetry.addData("Last drive stop:", "Timeout!");
                break;
            }

            robot.rightMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            robot.leftMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

            robot.rightMotor.setPower(rightSpeed);
            robot.leftMotor.setPower(leftSpeed);


            //telemetry.addData("gyro heading", gyro.getHeading());
            //telemetry.addData("left_encoder", motorleft.getCurrentPosition());
            //telemetry.addData("right_encoder", motorright.getCurrentPosition());
            //telemetry.addData("error", error);

        }

        telemetry.addData("Last drive stop:", "Loop complete!");
        robot.rightMotor.setPower(0.00);
        robot.leftMotor.setPower(0.00);
        return (time < startTime + timeout);
    }

    public boolean gyroDrive(double targetAngle, double throttle, double distance, double timeout) throws InterruptedException {

        int startRPos = robot.rightMotor.getCurrentPosition();
        int startLPos = robot.leftMotor.getCurrentPosition();
        double startTime = time;

        while (Math.abs(robot.rightMotor.getCurrentPosition() -startRPos) + Math.abs(robot.leftMotor.getCurrentPosition() -startLPos) < distance) {
            if (time > startTime + timeout) {
                telemetry.addData("Last drive stop:", "Timeout!");
                break;
            }

            //telemetry.addData("motorleft", motorleft.getCurrentPosition() - startLPos);
            //telemetry.addData("motorright", motorright.getCurrentPosition() - startRPos);
            Orientation orientation = robot.imu.getAngularOrientation(AxesReference.EXTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES);

            double error = ((orientation.thirdAngle > 180 ? orientation.thirdAngle - 360 : orientation.thirdAngle) - targetAngle) / (25.0);
            //double error = ((gyro.getHeading() > 180 ? gyro.getHeading() - 360 : gyro.getHeading()) - targetAngle) / (25.0);

            throttle = Range.clip(throttle, -1, 1);

            double right = throttle + error;
            double left = throttle - error;

            if (throttle < 0) {
                right = Range.clip(right, -1, 1);
                left = Range.clip(left, -1, 1);
            } else {
                right = Range.clip(right, -1, 1);
                left = Range.clip(left, -1, 1);
            }

            robot.rightMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            robot.leftMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

            robot.rightMotor.setPower(right);
            robot.leftMotor.setPower(left);


            //telemetry.addData("gyro heading", gyro.getHeading());
            //telemetry.addData("left_encoder", motorleft.getCurrentPosition());
            //telemetry.addData("right_encoder", motorright.getCurrentPosition());
            //telemetry.addData("error", error);

        }

        telemetry.addData("Last drive stop:", "Loop complete!");
        robot.rightMotor.setPower(0.00);
        robot.leftMotor.setPower(0.00);
        return (time < startTime + timeout);
    }

    // Function find get the cipher value at the start of autonomous
    // timeout is the max amount of seconds we can be searching for the cipher. CENTER will be returned if it is not found.
    public int findCipher(double timeout) {
        double startTime = time;

        while (opModeIsActive()) {
            if (time > startTime + timeout) {
                break;
            }

            /**
             * See if any of the instances of {@link relicTemplate} are currently visible.
             * {@link RelicRecoveryVuMark} is an enum which can have the following values:
             * UNKNOWN, LEFT, CENTER, and RIGHT. When a VuMark is visible, something other than
             * UNKNOWN will be returned by {@link RelicRecoveryVuMark#from(VuforiaTrackable)}.
             */
            RelicRecoveryVuMark vuMark = RelicRecoveryVuMark.from(relicTemplate);
            if (vuMark != RelicRecoveryVuMark.UNKNOWN) {

                // Found an instance of the template.
                telemetry.addData("VuMark", "%s visible", vuMark);
                if (vuMark == RelicRecoveryVuMark.LEFT) {
                    return LEFT;
                }
                else if (vuMark == RelicRecoveryVuMark.CENTER) {
                    return CENTER;
                }
                else if (vuMark == RelicRecoveryVuMark.RIGHT) {
                    return RIGHT;
                }
            }
            else {
                telemetry.addData("VuMark", "not visible");
            }
            telemetry.update();
        }
        return CENTER; // No vumark was found within the timeout period, so we'll just return center (1/3 chance of getting it right)
    }
    //----------------------------------------------------------------------------------------------
// Telemetry Configuration
//----------------------------------------------------------------------------------------------

    void composeTelemetry() {

        // At the beginning of each telemetry update, grab a bunch of data
        // from the IMU that we will then display in separate lines.
        telemetry.addAction(new Runnable() { @Override public void run()
                {
                // Acquiring the angles is relatively expensive; we don't want
                // to do that in each of the three items that need that info, as that's
                // three times the necessary expense.
                angles   = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                gravity  = imu.getGravity();
                }
            });

        telemetry.addLine()
            .addData("status", new Func<String>() {
                @Override public String value() {
                    return imu.getSystemStatus().toShortString();
                    }
                })
            .addData("calib", new Func<String>() {
                @Override public String value() {
                    return imu.getCalibrationStatus().toString();
                    }
                });

        telemetry.addLine()
            .addData("heading", new Func<String>() {
                @Override public String value() {
                    return formatAngle(angles.angleUnit, angles.firstAngle);
                    }
                })
            .addData("roll", new Func<String>() {
                @Override public String value() {
                    return formatAngle(angles.angleUnit, angles.secondAngle);
                    }
                })
            .addData("pitch", new Func<String>() {
                @Override public String value() {
                    return formatAngle(angles.angleUnit, angles.thirdAngle);
                    }
                });

        telemetry.addLine()
            .addData("grvty", new Func<String>() {
                @Override public String value() {
                    return gravity.toString();
                    }
                })
            .addData("mag", new Func<String>() {
                @Override public String value() {
                    return String.format(Locale.getDefault(), "%.3f",
                            Math.sqrt(gravity.xAccel*gravity.xAccel
                                    + gravity.yAccel*gravity.yAccel
                                    + gravity.zAccel*gravity.zAccel));
                    }
                });
    }

    //----------------------------------------------------------------------------------------------
    // Formatting
    //----------------------------------------------------------------------------------------------

    String formatAngle(AngleUnit angleUnit, double angle) {
        return formatDegrees(AngleUnit.DEGREES.fromUnit(angleUnit, angle));
    }

    String formatDegrees(double degrees){
        return String.format(Locale.getDefault(), "%.1f", AngleUnit.DEGREES.normalize(degrees));
    }
}
