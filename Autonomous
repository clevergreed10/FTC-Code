/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorController;
import com.qualcomm.robotcore.util.Range;

import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.Func;
import org.firstinspires.ftc.robotcore.external.matrices.OpenGLMatrix;
import org.firstinspires.ftc.robotcore.external.matrices.VectorF;
import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import org.firstinspires.ftc.robotcore.external.navigation.RelicRecoveryVuMark;
import org.firstinspires.ftc.robotcore.external.navigation.Velocity;
import org.firstinspires.ftc.robotcore.external.navigation.VuMarkInstanceId;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackable;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackableDefaultListener;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackables;

import java.util.Locale;

/**
 * {@link Autonomous} gives a short demo on how to use the BNO055 Inertial Motion Unit (IMU) from AdaFruit.
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 *
 * @see <a href="http://www.adafruit.com/products/2472">Adafruit IMU</a>
 */
//@com.qualcomm.robotcore.eventloop.opmode.Autonomous(name = "Sensor: BNO055 IMU", group = "Sensor")
@Disabled                            // Comment this out to add to the opmode list
public class Autonomous extends LinearOpMode    {
    //----------------------------------------------------------------------------------------------
    // State
    //----------------------------------------------------------------------------------------------

    HardwareEEBot robot = new HardwareEEBot();

    // The IMU sensor object
    BNO055IMU imu;

    // State used for updating telemetry .. unsure if necessary
    Orientation angles;
    Acceleration gravity;

    //vuforia is the variable we will use to store our instance of the Vuforia localization engine.
    VuforiaLocalizer vuforia;
    VuforiaTrackable relicTemplate;

    final int BLUE = 0;
    final int RED  = 1;
    final int LEFT   = -1;
    final int CENTER = -2;
    final int RIGHT  = -3;

    final double TURN_SPEED = 0.3;
    
    private double grabberLeftMin = 0.48;
    private double grabberLeftMax = 0.6;
    private double grabberRightMin = 0.25;
    private double grabberRightMax = 0.33;

    private int TEAMCOLOR = BLUE;

    //----------------------------------------------------------------------------------------------
    // Main logic
    //----------------------------------------------------------------------------------------------

    @Override public void runOpMode() {
        robot.init(hardwareMap);

        // Set up the parameters with which we will use our IMU.
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit           = BNO055IMU.AngleUnit.DEGREES;
        parameters.accelUnit           = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
        //parameters.calibrationDataFile = "BNO055IMUCalibration.json"; // see the calibration sample opmode
        parameters.loggingEnabled      = true;
        parameters.loggingTag          = "IMU";
        parameters.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();

        // The robot has been crashing during init phase, so we now initialize the imu inside our runOpMode()
        robot.imu.initialize(parameters);

        // Tell vuforia to show what the camera is seeing.
        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        VuforiaLocalizer.Parameters vuforiaParameters = new VuforiaLocalizer.Parameters(cameraMonitorViewId);

        // OR...  Do Not Activate the Camera Monitor View, to save power
        // VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();

        // Joshua's license key
        vuforiaParameters.vuforiaLicenseKey = "AdLORsH/////AAAAGSk7H7mSvUJng/rqnN96DDJxBj6Ir4uum2FxifkokX51jW5AIEmws+YcGEoLywmIHtl1ajCqCfQ1tIjgRVhYlFbYasGMvweedEqPzlifXfLf6uFwPKN82+OT/JpKhtJr7n6LTvh5EQERs9eDByNvprWy0vqb5CEUszHs4WA2zrsS7occZN6MLIQXSBlArbnWAGr879iJb6Toed/6TLgIrzDkH1mTiLmJ7ANsHoNkazcQeC+pvtfdylzd7n3Azds1+wo1X0CmM6o4vw2e31DslsnJNLHLxCWpWArSVHKrvPJS75jDUeHiyoi4qlOm3R2S8nElj94EIJ69R66Ofk0gxM2F/10Juk+z9p0UQ5jaYAU0";
        // Chose which camera to use
        vuforiaParameters.cameraDirection = VuforiaLocalizer.CameraDirection.BACK;
        this.vuforia = ClassFactory.createVuforiaLocalizer(vuforiaParameters);
        /*
         * Load the data set containing the VuMarks for Relic Recovery. There's only one trackable
         * in this data set: all three of the VuMarks in the game were created from this one template,
         * but differ in their instance id information.
         * @see VuMarkInstanceId
         */
        VuforiaTrackables relicTrackables = this.vuforia.loadTrackablesFromAsset("RelicVuMark");
        relicTemplate = relicTrackables.get(0);
        relicTemplate.setName("relicVuMarkTemplate"); // can help in debugging; otherwise not necessary

        relicTrackables.activate();

        // Setup over, now run commands
        robot.glyphGrabberLeft.setPosition(grabberLeftMin); // Close our grabber arms onto the glyph
        robot.glyphGrabberRight.setPosition(grabberRightMax);
        int pictoKey = findPictograph(10); // Does this yield or run on it's own?
        boolean driveForward = jewelRun();
        if (driveForward) {
            gyroDrive(0, 0.25, 50, 1.0); // Distance is NOT in inches, we need to measure encoder counts to inches
        }
        else {
            gyroDrive(0, -0.25, 50, 1.0);
            sleep(100); // Ensure we come to a complete stop.
            gyroDrive(0, 0.25, 100, 1.0); // Drive to the position we would be at if we had gone backwards
        }

        telemetry.addData("Prepare to drive!", " Forward");
        sleep(1000); // For debug
        gyroDrive(0, 0.5, 500, 5.0); // Drive to the center of the cryptobox, then go backwards or forwards if the pictograph is left or right respectively.
        if (pictoKey == LEFT) {
            gyroDrive(0, 0.5, 100, 5.0);
        }
        else if (pictoKey == RIGHT) {
            gyroDrive(0, -0.5, 100, 5.0);
        }
        gyroTurn(90, 5.0);
        sleep(500);
        robot.glyphGrabberLeft.setPosition(grabberLeftMax); // Release the glyph and score!
        robot.glyphGrabberRight.setPosition(grabberRightMin);
        // Our robot should be inside the safezone at this point and our autonomous will end
        // In the future we are going to play around with grabbing more glyphs off the field in autonomous
    }

    /* Function to lower the jewel arm and sense the color
     Returning true means to drive forward (direction of color sensor)
     Returning false means the opposite
     */
    boolean jewelRun(){
        robot.jewelArm.setPosition(1.0);
        boolean goForward = false;
        sleep(500);
        telemetry.addData("Red: ", robot.jewelSensorColor.red());
        telemetry.addData("Blue: ", robot.jewelSensorColor.blue());
        telemetry.update();
        if (robot.jewelSensorColor.red() > 1) {
            // Direct ball is red
            if (TEAMCOLOR == RED) {
                goForward = true;
            }
            else {
                goForward = false; // This is probably redundant
            }
        }
        robot.jewelArm.setPosition(0.1); // We need to measure exactly where to set the arm position
        return goForward;
    }

    /*
    Drive by gyro function, drives the robot a given length keeping within a certain angle
    targetAngle: The angle we wish to stay on
    speed: The speed of the motors. Unlike last year, -speed means you go backwards.
    distance: The length we wish to travel
     */
    public Boolean gyroDrive(double targetAngle, double speed, int distance, double timeout) {
        // Set the motors to measure encoder counts.
        robot.rightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.rMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.leftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.lMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        int startRPos = robot.rightMotor.getCurrentPosition();
        int startLPos = robot.leftMotor.getCurrentPosition();
        double startTime = time;

        speed = Range.clip(speed, -1, 1);
        // Start the loop. Even if we're going backwards, math.abs makes sure that we can still compare to distance.
        while ((Math.abs(robot.rightMotor.getCurrentPosition() -startRPos) < distance) && (Math.abs(robot.leftMotor.getCurrentPosition() -startLPos) < distance)) {
            if (time > startTime + timeout) {
                telemetry.addData("Last drive stop:", "Timeout!");
                break;
            }

            Orientation orientation = robot.imu.getAngularOrientation(AxesReference.EXTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES);
            double error = ((orientation.thirdAngle > 180 ? orientation.thirdAngle - 360 : orientation.thirdAngle) - targetAngle) / (25.0);

            telemetry.addData("motorleft dist:", robot.leftMotor.getCurrentPosition() - startLPos);
            telemetry.addData("motorright dist:", robot.rightMotor.getCurrentPosition() - startRPos);
            telemetry.addData("Current z orientation:", orientation.thirdAngle);
            telemetry.addData("error", error);

            double right = speed + error;
            double left = speed - error;

            if (speed < 0) {
                right = Range.clip(right, -1, 1);
                left = Range.clip(left, -1, 1);
            } else {
                right = Range.clip(right, -1, 1);
                left = Range.clip(left, -1, 1);
            }

            //robot.rightMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            //robot.leftMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

            robot.rightMotor.setPower(right);
            robot.rMotor.setPower(right);
            robot.leftMotor.setPower(left);
            robot.lMotor.setPower(left);
        }

        telemetry.addData("Last drive stop:", "Loop complete!");
        robot.rightMotor.setPower(0.0);
        robot.rMotor.setPower(0.0);
        robot.leftMotor.setPower(0.0);
        robot.lMotor.setPower(0.0);
        
        robot.rightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.rMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.leftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.lMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        return (time < startTime + timeout);
    }

    public Boolean gyroTurn(double targetAngle, double timeout) {
        // Set the motors to measure encoder counts.
        robot.rightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.rMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.leftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.lMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        double startTime = time;

        double speed = 0.0;

        // Start the loop. loop ends if angle is reached or time runs out
        while (time < startTime + timeout) {
            Orientation orientation = robot.imu.getAngularOrientation(AxesReference.EXTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES);
            double angleDiff = ((orientation.thirdAngle > 180 ? orientation.thirdAngle - 360 : orientation.thirdAngle) - targetAngle);
            telemetry.addData("Current z orientation:", orientation.thirdAngle);
            telemetry.addData("Angle difference:", angleDiff);
            telemetry.addData("Turning speed:", speed);
            double right = 0.0;
            double left = 0.0;

            if (Math.abs(angleDiff) < 5){
                break;
            }
            else if (Math.abs(angleDiff) == angleDiff) { // Make a clockwise turn
                speed = Range.clip(angleDiff/60, 0.1, TURN_SPEED);
                right = speed;
                left = -speed;
            }
            else if (Math.abs(angleDiff) != angleDiff) { // Turn counter clockwise
                speed = Range.clip(angleDiff/60, -TURN_SPEED, -0.1);
                right = -speed;
                left = speed;
            }

            robot.rightMotor.setPower(right);
            robot.rMotor.setPower(right);
            robot.leftMotor.setPower(left);
            robot.lMotor.setPower(left);
        }

        robot.rightMotor.setPower(0.0);
        robot.rMotor.setPower(0.0);
        robot.leftMotor.setPower(0.0);
        robot.lMotor.setPower(0.0);

        robot.rightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.rMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.leftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.lMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        
        telemetry.addData("Last drive stop:", "Loop complete!");
        return (time < startTime + timeout);
    }

    // Function find get the pictograph value at the start of autonomous
    // timeout is the max amount of seconds we can be searching for the cipher. CENTER will be returned if it is not found.
    private int findPictograph(double timeout) {
        double startTime = time;

        while (opModeIsActive()) {
            if (time > startTime + timeout) {
                break;
            }

            /**
             * See if any of the instances of {@link relicTemplate} are currently visible.
             * {@link RelicRecoveryVuMark} is an enum which can have the following values:
             * UNKNOWN, LEFT, CENTER, and RIGHT. When a VuMark is visible, something other than
             * UNKNOWN will be returned by {@link RelicRecoveryVuMark#from(VuforiaTrackable)}.
             */
            RelicRecoveryVuMark vuMark = RelicRecoveryVuMark.from(relicTemplate);
            if (vuMark != RelicRecoveryVuMark.UNKNOWN) {

                // Found an instance of the template.
                telemetry.addData("VuMark", "%s visible", vuMark);
                if (vuMark == RelicRecoveryVuMark.LEFT) {
                    return LEFT;
                }
                else if (vuMark == RelicRecoveryVuMark.CENTER) {
                    return CENTER;
                }
                else if (vuMark == RelicRecoveryVuMark.RIGHT) {
                    return RIGHT;
                }
            }
            else {
                telemetry.addData("VuMark", "not visible");
            }
            telemetry.update();
        }
        telemetry.addData("Cipher not found", CENTER);
        telemetry.update();
        return CENTER; // No vumark was found within the timeout period, so we'll just return center (1/3 chance of getting it right)
    }

    String format(OpenGLMatrix transformationMatrix) {
        return (transformationMatrix != null) ? transformationMatrix.formatAsTransform() : "null";
    }


    //----------------------------------------------------------------------------------------------
    // Telemetry Configuration
    //----------------------------------------------------------------------------------------------

    void composeTelemetry() {

        // At the beginning of each telemetry update, grab a bunch of data
        // from the IMU that we will then display in separate lines.
        telemetry.addAction(new Runnable() { @Override public void run()
        {
            // Acquiring the angles is relatively expensive; we don't want
            // to do that in each of the three items that need that info, as that's
            // three times the necessary expense.
            angles   = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            gravity  = imu.getGravity();
        }
        });

        telemetry.addLine()
                .addData("status", new Func<String>() {
                    @Override public String value() {
                        return imu.getSystemStatus().toShortString();
                    }
                })
                .addData("calib", new Func<String>() {
                    @Override public String value() {
                        return imu.getCalibrationStatus().toString();
                    }
                });

        telemetry.addLine()
                .addData("heading", new Func<String>() {
                    @Override public String value() {
                        return formatAngle(angles.angleUnit, angles.firstAngle);
                    }
                })
                .addData("roll", new Func<String>() {
                    @Override public String value() {
                        return formatAngle(angles.angleUnit, angles.secondAngle);
                    }
                })
                .addData("pitch", new Func<String>() {
                    @Override public String value() {
                        return formatAngle(angles.angleUnit, angles.thirdAngle);
                    }
                });

        telemetry.addLine()
                .addData("grvty", new Func<String>() {
                    @Override public String value() {
                        return gravity.toString();
                    }
                })
                .addData("mag", new Func<String>() {
                    @Override public String value() {
                        return String.format(Locale.getDefault(), "%.3f",
                                Math.sqrt(gravity.xAccel*gravity.xAccel
                                        + gravity.yAccel*gravity.yAccel
                                        + gravity.zAccel*gravity.zAccel));
                    }
                });
    }

    //----------------------------------------------------------------------------------------------
    // Formatting
    //----------------------------------------------------------------------------------------------

    String formatAngle(AngleUnit angleUnit, double angle) {
        return formatDegrees(AngleUnit.DEGREES.fromUnit(angleUnit, angle));
    }

    String formatDegrees(double degrees){
        return String.format(Locale.getDefault(), "%.1f", AngleUnit.DEGREES.normalize(degrees));
    }
}
