package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;

import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;

/**
 * Created by Josh on 11/8/2017.
 */

public class AutonomousCommands {
    private double TURN_THRESHOLD = 15;

    Telemetry telemetry;
    LinearOpMode opMode;

    DcMotor motorBR;
    DcMotor motorFR;
    DcMotor motorBL;
    DcMotor motorFL;

    Servo intakeBR;
    Servo intakeBL;
    Servo intakeUR;
    Servo intakeUL;
    Servo jewelArm;

    ColorSensor jewelSensorColor;

    BNO055IMU imu;

    boolean initialized = false;

    public AutonomousCommands() {}

    // Init with the EEBot robot. This has errored in the past though.
    public void init(HardwareEEBot robot, LinearOpMode newOpMode) {
        opMode = newOpMode;
        telemetry = newOpMode.telemetry;

        motorBR = robot.motorBR;
        motorFR = robot.motorFR;
        motorBL = robot.motorBL;
        motorFL = robot.motorFL;

        intakeBR = robot.BR_Intake;
        intakeBL = robot.BL_Intake;
        intakeUR = robot.UR_Intake;
        intakeUL = robot.UL_Intake;
        jewelArm = robot.jewelArm;

        jewelSensorColor = robot.jewelSensorColor;

        imu = robot.imu;

        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit            = BNO055IMU.AngleUnit.DEGREES;
        parameters.accelUnit            = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
        parameters.calibrationDataFile  = "BNO055IMUCalibration.json";
        parameters.loggingEnabled       = true;
        parameters.loggingTag           = "IMU";
        parameters.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();
        imu.initialize(parameters);

        initialized = true;
    }

    // init with a HardwareMap. This manually gets all the servo and motors from the hwMap.
    public void init(HardwareMap hwMap, LinearOpMode newOpMode) {
        opMode = newOpMode;
        telemetry = newOpMode.telemetry;

        motorBR = hwMap.dcMotor.get("motor_br");
        motorBR.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        motorBR.setPower(0);

        motorFR = hwMap.dcMotor.get("motor_fr");
        motorFR.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        motorFR.setDirection(DcMotor.Direction.REVERSE);
        motorFR.setPower(0);

        motorBL = hwMap.dcMotor.get("motor_bl");
        motorBL.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        motorBL.setPower(0);

        motorFL = hwMap.dcMotor.get("motor_fl");
        motorFL.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        motorFL.setDirection(DcMotor.Direction.REVERSE);
        motorFL.setPower(0);

        intakeBR = hwMap.get(Servo.class, "top_conveyor");
        intakeBL = hwMap.get(Servo.class, "bottom_conveyor");
        intakeUR = hwMap.get(Servo.class, "UR_Intake");
        intakeUL = hwMap.get(Servo.class, "UL_Intake");
        jewelArm = hwMap.servo.get("jewelArm");

        jewelSensorColor = hwMap.get(ColorSensor.class, "sensor_color_distance");

        imu = hwMap.get(BNO055IMU.class, "imu");

        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit            = BNO055IMU.AngleUnit.DEGREES;
        parameters.accelUnit            = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
        parameters.calibrationDataFile  = "BNO055IMUCalibration.json";
        parameters.loggingEnabled       = true;
        parameters.loggingTag           = "IMU";
        parameters.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();
        imu.initialize(parameters);

        initialized = true;
    }

    public void setJewelArmPosition(double pos) { jewelArm.setPosition(pos); }

    /* Function to turn on/off the intake wheels
    direction is the direction in which the wheels should spin, IN, OUT, or NONE.
    intakePair is the pair of wheels in which to set the direction of.

    REFERENCE; On continuous rotation servos: 0 and 1 are spinning, 0.5 is stop.
     */
    public void changeIntakeDirection(Direction direction, Direction intakePair) {
        if (intakePair == Direction.DOWN) {
            if (direction == Direction.IN) {
                intakeBL.setPosition(1);
                intakeBR.setPosition(0);
            } else if (direction == Direction.OUT) {
                intakeBL.setPosition(0);
                intakeBR.setPosition(1);
            } else {
                intakeBL.setPosition(0.5);
                intakeBR.setPosition(0.5);
            }
        }
        else if (intakePair == Direction.UP) {
            if (direction == Direction.IN) {
                intakeBL.setPosition(0);
                intakeBR.setPosition(1);
            } else if (direction == Direction.OUT) {
                intakeBL.setPosition(1);
                intakeBR.setPosition(0);
            } else {
                intakeBL.setPosition(0.5);
                intakeBR.setPosition(0.5);
            }
        }
    }
    /*
    Drive by gyro function, drives the robot a given length keeping within a certain angle
    targetAngle: The angle we wish to stay on
    speed: The speed of the motors. Unlike last year, -speed means you go backwards.
    distance: The length we wish to travel
    TODO: Convert distance from ticks to inches.
     */
    public boolean gyroDrive(double targetAngle, double speed, int distance, double timeout) {
        if (!initialized || !opMode.opModeIsActive()) {
            return false;
        }
        double right = 0;
        double left  = 0;
        boolean goBackwards = false;
        // Set the motors to measure encoder counts.
        motorBR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        motorFR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        motorBL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        motorFL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        int startRPos = motorBR.getCurrentPosition();
        int startLPos = motorBL.getCurrentPosition();
        double startTime = opMode.time;

        if (speed < 0) {
            goBackwards = true;
        }
        // Robot is going backwards when it should be going forwards.
        speed = Range.clip(-speed, -1, 1);
        // Start the loop. Even if we're going backwards, math.abs makes sure that we can still compare to distance.
        while (opMode.opModeIsActive() &&
                (Math.abs(motorBR.getCurrentPosition() -startRPos) < distance) &&
                    (Math.abs(motorBL.getCurrentPosition() -startLPos) < distance)) {

            if (opMode.time > startTime + timeout) {
                telemetry.addData("Last drive stop:", "Timeout!");
                telemetry.update();
                break;
            }

            Orientation orientation = imu.getAngularOrientation(AxesReference.EXTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES);
            double error = ((orientation.thirdAngle > 180 ? orientation.thirdAngle - 360 : orientation.thirdAngle) - targetAngle) / (25.0);
            error = Range.clip(error, -Math.abs(speed/2), Math.abs(speed/2));
            telemetry.addData("Right speed is %f", right);
            telemetry.addData("Left speed is %f", left);
            telemetry.addData("Current z orientation:", orientation.thirdAngle);
            telemetry.addData("Error:", error);
            telemetry.update();

            if (goBackwards) { // Motor correction must be reversed if we're going backwards.
                right = Range.clip((speed - error), -1, 1);
                left = Range.clip((speed + error), -1, 1);
            } else {
                right = Range.clip((speed + error), -1, 1);
                left = Range.clip((speed - error), -1, 1);
            }

            motorBR.setPower(right/5);
            motorFR.setPower(right/5);
            motorBL.setPower(left/5);
            motorFL.setPower(left/5);
        }

        telemetry.addData("Last drive stop:", "Loop complete!");
        motorBR.setPower(0.0);
        motorFR.setPower(0.0);
        motorBL.setPower(0.0);
        motorFL.setPower(0.0);

        motorBR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        motorFR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        motorBL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        motorFL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        return (opMode.time < startTime + timeout);
    }


    // UNFINISHED
    public boolean gyroDrive(double targetAngle, double speed, int distance, double timeout, boolean useNewDrive) {
        if (!initialized) {
            return false;
        } else if (!useNewDrive) {
            return gyroDrive(targetAngle, speed, distance, timeout);
        } else {

            double right, left;
            boolean goBackwards = false;
            // Set the motors to run to position
            motorBR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            motorFR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            motorBL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            motorFL.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            int startRPos = motorBR.getCurrentPosition();
            int startLPos = motorBL.getCurrentPosition();
            int startRPos2 = motorFR.getCurrentPosition();
            int startLPos2 = motorFL.getCurrentPosition();
            double startTime = opMode.time;

            if (speed < 0) {
                distance = -Math.abs(distance); // abs is in case -distance and -speed are accidentally sent.
                goBackwards = true;
            }

            speed = Range.clip(Math.abs(speed), 0, 1);

            motorBR.setTargetPosition(startRPos + distance);
            motorFR.setTargetPosition(startRPos2 + distance);
            motorBL.setTargetPosition(startLPos + distance);
            motorFL.setTargetPosition(startLPos2 + distance);

            motorBR.setPower(speed);
            motorFR.setPower(speed);
            motorBL.setPower(speed);
            motorFL.setPower(speed);

            // Start the loop.
            while (opMode.opModeIsActive() &&
                    (motorBR.isBusy() && motorFR.isBusy() && motorBL.isBusy() && motorFL.isBusy())) {
                if (opMode.time > startTime + timeout) {
                    telemetry.addData("Last drive stop:", "Timeout!");
                    break;
                }

                Orientation orientation = imu.getAngularOrientation(AxesReference.EXTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES);
                double error = ((orientation.thirdAngle > 180 ? orientation.thirdAngle - 360 : orientation.thirdAngle) - targetAngle) / (25.0);
                error = Range.clip(error, -speed/2, speed/2);
                telemetry.addData("leftMotor dist:", motorBL.getCurrentPosition() - startLPos);
                telemetry.addData("rightMotor dist:", motorBR.getCurrentPosition() - startRPos);
                telemetry.addData("Current z orientation:", orientation.thirdAngle);
                telemetry.addData("error", error);
                telemetry.update();

                if (goBackwards) { // Motor correction must be reversed if we're going backwards.
                    right = Range.clip((speed - error), -1, 1);
                    left = Range.clip((speed + error), -1, 1);
                } else {
                    right = Range.clip((speed + error), -1, 1);
                    left = Range.clip((speed - error), -1, 1);
                }

                motorBR.setPower(right);
                motorFR.setPower(right);
                motorBL.setPower(left);
                motorFL.setPower(left);
            }

            telemetry.addData("Last drive stop:", "Loop complete!");
            motorBR.setPower(0.0);
            motorFR.setPower(0.0);
            motorBL.setPower(0.0);
            motorFL.setPower(0.0);

            motorBR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            motorFR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            motorBL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            motorFL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            return (opMode.time < startTime + timeout);
        }
    }

    /*
        The Turn function. Will turn to a given angle
        targetAngle: The angle we wish to turn to. Should be between -180 and 180
        speed: The power of the motors
        timeout: Automatic timeout in seconds
        TODO: Convert distance from ticks to inches.
         */
    public boolean gyroTurn(double targetAngle, double speed, double timeout) {
        if (!initialized) {
            return false;
        }
        double startTime = opMode.time;
        double currentAngle = imu.getAngularOrientation(AxesReference.EXTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES).thirdAngle;
        double right;
        double left;

        speed = Range.clip(Math.abs(speed), 0, 1);

        while (Math.abs(targetAngle - currentAngle) > TURN_THRESHOLD) { // Drive until we're within 15 degrees of the starting angle
            if (opMode.time > startTime + timeout) {
                telemetry.addData("Last drive stop:", "Timeout!");
                break;
            }

            Orientation orientation = imu.getAngularOrientation(AxesReference.EXTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES);
            currentAngle = orientation.thirdAngle;

            double slowdown = Range.clip( (Math.abs(targetAngle - currentAngle) / 30), 0.1, 1) ; // Slow down if we are within 30 degrees of the target angle.

            telemetry.addData("Current z orientation:", currentAngle);
            telemetry.addData("Slowdown:", slowdown);
            telemetry.update();

            double comparisonAngle = targetAngle - currentAngle; // We're basically rotating the target angle into the local space of the current angle.
            if (Math.abs(comparisonAngle) > 180) { comparisonAngle = -comparisonAngle; } // This is for cases such as target: -170   current: 170

            if (comparisonAngle >= 0) { // Turn right
                right = -speed * slowdown;
                left  = speed * slowdown;
            }
            else { // Turn left
                right = speed * slowdown;
                left  = -speed * slowdown;
            }

            motorBR.setPower(right);
            motorFR.setPower(right);
            motorBL.setPower(left);
            motorFL.setPower(left);
        }

        telemetry.addData("Last drive stop:", "Loop complete!");
        motorBR.setPower(0.0);
        motorFR.setPower(0.0);
        motorBL.setPower(0.0);
        motorFL.setPower(0.0);

        motorBR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        motorFR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        motorBL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        motorFL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        return (opMode.time < startTime + timeout);
    }

    /*
        The Strafing function.

        UNFINISHED. DO NOT USE.
        TODO: Convert distance from ticks to inches.
    */
    public boolean gyroStrafe(double targetAngle, double speed, double timeout) {
        if (!initialized) {
            return false;
        }
        double startTime = opMode.time;
        double currentAngle = imu.getAngularOrientation(AxesReference.EXTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES).thirdAngle;
        double right;
        double left;

        speed = Range.clip(Math.abs(speed), 0, 1);

        while (Math.abs(targetAngle - currentAngle) > TURN_THRESHOLD) { // Drive until we're within 15 degrees of the starting angle
            if (opMode.time > startTime + timeout) {
                telemetry.addData("Last drive stop:", "Timeout!");
                break;
            }

            Orientation orientation = imu.getAngularOrientation(AxesReference.EXTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES);
            currentAngle = orientation.thirdAngle;

            double slowdown = Range.clip( (Math.abs(targetAngle - currentAngle) / 30), 0.1, 1) ; // Slow down if we are within 30 degrees of the target angle.

            telemetry.addData("Current z orientation:", currentAngle);
            telemetry.addData("Slowdown:", slowdown);
            telemetry.update();

            double comparisonAngle = targetAngle - currentAngle; // We're basically rotating the target angle into the local space of the current angle.
            if (Math.abs(comparisonAngle) > 180) { comparisonAngle = -comparisonAngle; } // This is for cases such as target: -170   current: 170

            if (comparisonAngle >= 0) { // Turn right
                right = -speed * slowdown;
                left  = speed * slowdown;
            }
            else { // Turn left
                right = speed * slowdown;
                left  = -speed * slowdown;
            }

            motorBR.setPower(right);
            motorFR.setPower(right);
            motorBL.setPower(left);
            motorFL.setPower(left);
        }

        telemetry.addData("Last drive stop:", "Loop complete!");
        motorBR.setPower(0.0);
        motorFR.setPower(0.0);
        motorBL.setPower(0.0);
        motorFL.setPower(0.0);

        motorBR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        motorFR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        motorBL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        motorFL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        return (opMode.time < startTime + timeout);
    }

    /*
   Function to lower the jewel arm and sense the color
   Returning true means to drive forward (direction of color sensor)
   Returning false means to drive backwards
    */
    public TeamColor jewelRun() {
        jewelArm.setPosition(0.09);
        opMode.sleep(3000);
        telemetry.addData("Red: ", jewelSensorColor.red());
        telemetry.addData("Blue: ", jewelSensorColor.blue());
        telemetry.update();
        if (jewelSensorColor.red() > 1 && jewelSensorColor.red() > jewelSensorColor.blue()) {
            // Direct ball is red
            return TeamColor.RED;
        }
        else if (jewelSensorColor.blue() > 1 && jewelSensorColor.blue() > jewelSensorColor.red()) {
            // Direct ball is blue
            return TeamColor.BLUE;
        }
        else {
            return TeamColor.NONE;
        }
    }
}
