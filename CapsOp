/**
 * Created by Team 9386 on 9/27/2016.
 *
 * Updated and Rewritten 9/19/2017.
 *
 * TODO - 10-10: Change strafing to Triggers, scale speed,
 * TODO - 10-10: Code glyph grabbers on X and B buttons
 */
package org.firstinspires.ftc.teamcode;

//import com.qualcomm.robotcore.eventloop.opmode.Disabled;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;

//import com.qualcomm.robotcore.hardware.DcMotor;


//import org.firstinspires.ftc.teamcode.HardwareEEbot;


@TeleOp(name="EEbot: Cap'sOp", group="EEbot") //this tells the new Driver Station (V11) which type of code this is.
//@Disabled
public class EETeleop extends OpMode {

    int x = 0;
    //ModernRoboticsTouchSensor touch = null;
    /* Declare OpMode members. */
    HardwareEEBot robot = new HardwareEEBot();// Use a EE bot hardware
    private double DRIVE_DAMPENER = 0.75;
    final private double SPOOL_DAMPENER = 0.75;
    final private double SPOOL_DAMPEN_DOWN = 0.3;
    final private double STRAFE_SPEED = 0.7;                // The constant speed to strafe

    double startEncoderPos = 0;
    double SERV = 0.7;

    private boolean xDown = false;
    private boolean yDown = false;
    private boolean aDown = false;
    private boolean bDown = false;
    private boolean b1Down = false;
    private boolean jewelToggle = false;

    /*
     * Code to run ONCE when the driver hits INIT
     */
    @Override
    public void init() {
        /* Initialize the hardware variables.
         * The init() method of the hardware class does all the work here
         */
        robot.init(hardwareMap);

        // Send telemetry message to signify robot waiting;
        telemetry.addData("Say", "Hello Driver");    //
        updateTelemetry(telemetry);
    }

    /*
     * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY
     */
    @Override
    public void init_loop() {
        init();
    }

    /*
     * Code to run ONCE when the driver hits PLAY
     */
    @Override
    public void start() {
        robot.intakeLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.intakeLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        robot.intakeLeft.setTargetPosition(0);
        robot.intakeLeft.setPower(0.5);
    }

    /*
     * Code to run REPEATEDLY after the driver hits PLAY but before they hit STOP
     */
    @Override
    public void loop() {
        // GAMEPAD 1 CONTROLS \\
        // If a bumper is down, strafe. Otherwise drive from left and right sticks

        if (robot.intakeLeft.getMode() == DcMotor.RunMode.RUN_TO_POSITION) {
            robot.intakeLeft.setTargetPosition(robot.intakeLeft.getTargetPosition());
        }

        if (gamepad1.left_trigger > 0.1) {
            DRIVE_DAMPENER = 0.25;
        } else {
            DRIVE_DAMPENER = 0.75;
        }

        if (gamepad1.left_bumper) {
            // Strafe left
            telemetry.addData("Left bumper down!", STRAFE_SPEED);
            // Front left and back right motors go forwards.
            robot.motorBR.setPower(STRAFE_SPEED);
            robot.motorFL.setPower(STRAFE_SPEED);

            // Front right and back left motors go backwards.
            robot.motorBL.setPower(-STRAFE_SPEED);
            robot.motorFR.setPower(-STRAFE_SPEED);
        } else if (gamepad1.right_bumper) {
            // Strafe right

            telemetry.addData("Right bumper down!", STRAFE_SPEED);
            // Front right and back left motors go forwards.
            robot.motorBL.setPower(STRAFE_SPEED);
            robot.motorFR.setPower(STRAFE_SPEED);

            // Front left and back right motors go backwards.
            robot.motorBR.setPower(-STRAFE_SPEED);
            robot.motorFL.setPower(-STRAFE_SPEED);
        } else {
            // Apply motor control
            double rightPower = scaleInput(gamepad1.right_stick_y);
            double leftPower = scaleInput(gamepad1.left_stick_y);

            telemetry.addData("rightPower", rightPower);
            telemetry.addData("leftPower", leftPower);
            // Set the two right motors to rightPower

            if (Math.abs(rightPower) > 0.9 && Math.abs(leftPower) > 0.9
                    && (isNegative(leftPower) && !isNegative(rightPower)) || (isNegative(rightPower) && !isNegative(leftPower))) {
                robot.motorBR.setPower(rightPower);
                robot.motorFR.setPower(rightPower);

                robot.motorBL.setPower(leftPower);
                robot.motorFL.setPower(leftPower);
            } else {
                robot.motorBR.setPower(rightPower * DRIVE_DAMPENER);
                robot.motorFR.setPower(rightPower * DRIVE_DAMPENER);

                robot.motorBL.setPower(leftPower * DRIVE_DAMPENER);
                robot.motorFL.setPower(leftPower * DRIVE_DAMPENER);
            }
        }

        if (gamepad1.y) {
            robot.motorBR.setPower(-0.5);
            robot.motorFR.setPower(-0.5);
            robot.motorFL.setPower(-0.5);
            robot.motorBL.setPower(-0.5);
        }

        if (gamepad1.a) {
            robot.motorBR.setPower(0.5);
            robot.motorFR.setPower(0.5);
            robot.motorFL.setPower(0.5);
            robot.motorBL.setPower(0.5);
        }

        if (gamepad1.x) {
            SERV = SERV - 0.01;
        }

        if (gamepad1.b && !b1Down) {
            b1Down = true;
            if (jewelToggle) {
                robot.jewelArm.setPosition(0.95);
            } else {
                robot.jewelArm.setPosition(0.47);
            }
            jewelToggle = !jewelToggle;
        } else if (!gamepad1.b) {
            b1Down = false;
        }

        if (gamepad1.dpad_left) {
            robot.rgc.setPosition(0);
        }

        if (gamepad1.dpad_right) {
            robot.rgc.setPosition(0.7);
        }

        if (gamepad1.dpad_up) {
            robot.rga.setPosition(1);
        }

        if (gamepad1.dpad_down) {
            robot.rga.setPosition(SERV);
        }
                // GAMEPAD 2 CONTROLS \\

        // Set the spool power
        double spoolSpeed = scaleInput(gamepad2.left_stick_y);
        if (spoolSpeed > 0) {
            robot.spool.setPower(spoolSpeed * SPOOL_DAMPEN_DOWN);
        } else {
            robot.spool.setPower(spoolSpeed * SPOOL_DAMPENER);
        }

        if (gamepad2.dpad_down){
            robot.intakeLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        }
        if (gamepad2.dpad_up){
            robot.intakeLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            robot.intakeLeft.setPower(0.5);
        }

        if (gamepad2.dpad_left) {
            robot.intakeLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            robot.intakeLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            robot.intakeLeft.setTargetPosition(0);
            robot.intakeLeft.setPower(0.5);
        }
        // Spin the intake arms

        if (gamepad2.right_bumper) {
            if (robot.intakeLeft.getTargetPosition() != -144) {
                telemetry.addData("Updating target position:", -144);
                robot.intakeLeft.setTargetPosition(-144);
            }
        } else if (gamepad2.left_bumper) {
            if (robot.intakeLeft.getTargetPosition() != 0) {
                telemetry.addData("Updating target position:", 0);
                robot.intakeLeft.setTargetPosition(0);
            }
        }
        telemetry.addData("Current position:", robot.intakeLeft.getCurrentPosition());
        telemetry.update();

        //if (robot.intakeLeft.getMode() == DcMotor.RunMode.RUN_USING_ENCODER){
            if (Math.abs(gamepad2.right_stick_y) > 0.1) {
                robot.intakeLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                double leftPower = scaleInput(gamepad2.right_stick_y) * -0.5;
                robot.intakeLeft.setPower(leftPower);
            }
            else if(Math.abs(gamepad2.right_stick_y) < 1){
                robot.intakeLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                robot.intakeLeft.setPower(0.5);
            }
            else{
                robot.intakeLeft.setPower(0);
            }
        //}

        if (robot.intakeLeft.getMode() == DcMotor.RunMode.RUN_TO_POSITION){
            if (Math.abs(gamepad2.right_stick_y) > 0.1) {
                double leftPower = scaleInput(gamepad2.right_stick_y) * -0.5;
                robot.intakeRight.setPower(leftPower);
            }
            else{
                robot.intakeRight.setPower(0);
            }
        }
        // Intake servos
        if (gamepad2.x) {
            if (!xDown) {
                xDown = true;
                // Intake on top
                robot.UL_Intake.setPosition(0);
                robot.UR_Intake.setPosition(1);
            }
        } else {
            xDown = false;
        }
        if (gamepad2.y) {
            if (!yDown) {
                yDown = true;
                // Push out on top
                robot.UL_Intake.setPosition(1);
                robot.UR_Intake.setPosition(0);
            }
        } else {
            yDown = false;
        }

        if (!xDown && !yDown) {
            robot.UL_Intake.setPosition(0.5);
            robot.UR_Intake.setPosition(0.5);
        }


        if (gamepad2.a) {
            if (!aDown) {
                aDown = true;
                // Intake on bottom
                robot.BL_Intake.setPosition(1);
                robot.BR_Intake.setPosition(0);
            }
        } else {
            aDown = false;
        }
        if (gamepad2.b) {
            if (!bDown) {
                bDown = true;
                // Push out on bottom
                robot.BL_Intake.setPosition(0);
                robot.BR_Intake.setPosition(1);
            }
        } else {
            bDown = false;
        }

        if (!aDown && !bDown) {
            robot.BL_Intake.setPosition(0.5);
            robot.BR_Intake.setPosition(0.5);
        }

        Thread.yield();
    }

    boolean isNegative(double number) {
        if (Math.abs(number) == number) {
            return false;
        } else {
            return true;
        }
    }

    double scaleInput(double dVal) {
//        double[] scaleArray = { 0.0, 0.05, 0.09, 0.10, 0.12, 0.15, 0.18, 0.24,
//                0.30, 0.36, 0.43, 0.50, 0.60, 0.72, 0.85, 1.00, 1.00 };
        double[] scaleArray = {0.0, 0.05, 0.09, 0.10, 0.12, 0.15, 0.18, 0.24,
                0.30, 0.36, 0.43, 0.50, 0.60, 0.72, 0.85, 1.00, 1.00};

        // get the corresponding index for the scaleInput array.
        int index = (int) (dVal * 16.0);

        // index should be positive.
        if (index < 0) {
            index = -index;
        }


        // index cannot exceed size of array minus 1.
        if (index > 16) {
            index = 16;
        }

        // get value from the array.
        double dScale = 0.0;
        if (dVal < 0) {
            dScale = -scaleArray[index];
        } else {
            dScale = scaleArray[index];
        }

        // return scaled value.
        return dScale;
    }
}
