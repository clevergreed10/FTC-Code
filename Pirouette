/* Copyright (c) 2017 FIRST. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without modification,
* are permitted (subject to the limitations in the disclaimer below) provided that
* the following conditions are met:
*
* Redistributions of source code must retain the above copyright notice, this list
* of conditions and the following disclaimer.
*
* Redistributions in binary form must reproduce the above copyright notice, this
* list of conditions and the following disclaimer in the documentation and/or
* other materials provided with the distribution.
*
* Neither the name of FIRST nor the names of its contributors may be used to endorse or
* promote products derived from this software without specific prior written permission.
*
* NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
* LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;

import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.Func;
import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.RelicRecoveryVuMark;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackable;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackables;

import java.util.Locale;

/**
 * {@link } gives a short demo on how to use the BNO055 Inertial Motion Unit (IMU) from AdaFruit.
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 *
 * @see <a href="http://www.adafruit.com/products/2472">Adafruit IMU</a>
 */
@Autonomous(name = "Pirouette", group = "Blue")
//@Disabled                            // Comment this out to add to the opmode list
public class PirouetteSin extends LinearOpMode
{
    //----------------------------------------------------------------------------------------------
    // State
    //----------------------------------------------------------------------------------------------

    HardwareEEBot robot = new HardwareEEBot();

    //vuforia is the variable we will use to store our instance of the Vuforia localization engine.
    VuforiaLocalizer vuforia;
    VuforiaTrackable relicTemplate;

    final double pi = Math.PI;

    // colors
    final int BLUE = 0;
    final int RED  = 1;
    // sides
    final int LEFT   = -1;
    final int CENTER = -2;
    final int RIGHT  = -3;
    // direction
    final int CLOCKWISE = 10;
    final int COUNTER_CLOCKWISE = -10;
    // wheels
    final int FRONT_RIGHT = 1;
    final int BACK_RIGHT = 2;
    final int FRONT_LEFT = -1;
    final int BACK_LEFT = -2;
    private int TEAMCOLOR = BLUE;

    final double TURN_SPEED = 0.2;

    private double baseAngle = 0;

    // The IMU sensor object
    BNO055IMU imu;

    // State used for updating telemetry
    Orientation angles;
    Acceleration gravity;

    public DcMotor leftMotor   = null;
    public DcMotor rightMotor  = null;
    public DcMotor lMotor   = null;
    public DcMotor rMotor  = null;
    public DcMotor spool = null;

    public Servo jewelArm = null;
    /*public Servo glyphGrabberLeft = null;
    public Servo glyphGrabberRight = null;*/

    ColorSensor jewelSensorColor;


    //----------------------------------------------------------------------------------------------
    // Main logic
    //----------------------------------------------------------------------------------------------

    @Override public void runOpMode() {

        // Set up the parameters with which we will use our IMU. Note that integration
        // algorithm here just reports accelerations to the logcat log; it doesn't actually
        // provide positional information.
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit           = BNO055IMU.AngleUnit.DEGREES;
        parameters.accelUnit           = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
        parameters.calibrationDataFile = "BNO055IMUCalibration.json"; // see the calibration sample opmode
        parameters.loggingEnabled      = true;
        parameters.loggingTag          = "IMU";
        parameters.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();

        // Retrieve and initialize the IMU. We expect the IMU to be attached to an I2C port
        // on a Core Device Interface Module, configured to be a sensor of type "AdaFruit IMU",
        // and named "imu".
        imu = hardwareMap.get(BNO055IMU.class, "imu");
        imu.initialize(parameters);

        // Set up our telemetry dashboard
        //composeTelemetry();

        leftMotor   = hardwareMap.dcMotor.get("motor_left");
        leftMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        leftMotor.setPower(0);

        rightMotor  = hardwareMap.dcMotor.get("motor_right");
        rightMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        rightMotor.setDirection(DcMotor.Direction.REVERSE);
        rightMotor.setPower(0);

        //sweeper = hwMap.dcMotor.get("sweeper");

        lMotor   = hardwareMap.dcMotor.get("motor_left2");
        lMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        lMotor.setPower(0);

        rMotor  = hardwareMap.dcMotor.get("motor_right2");
        rMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        rMotor.setDirection(DcMotor.Direction.REVERSE);
        rMotor.setPower(0);

        spool  = hardwareMap.dcMotor.get("spool");
        spool.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        spool.setDirection(DcMotor.Direction.REVERSE);
        spool.setPower(0);

        jewelSensorColor = hardwareMap.get(ColorSensor.class, "sensor_color_distance");
        jewelSensorColor.enableLed(true);

        jewelArm = hardwareMap.servo.get("jewelArm");
        /*glyphGrabberLeft = hardwareMap.get(Servo.class, "glyphGrabberLeft");
        glyphGrabberRight = hardwareMap.get(Servo.class, "glyphGrabberRight");*/

        Boolean score = true;

        /*int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        VuforiaLocalizer.Parameters vuforiaParameters = new VuforiaLocalizer.Parameters(cameraMonitorViewId);

        // OR...  Do Not Activate the Camera Monitor View, to save power
        // VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();

        // Joshua's license key
        vuforiaParameters.vuforiaLicenseKey = "AdLORsH/////AAAAGSk7H7mSvUJng/rqnN96DDJxBj6Ir4uum2FxifkokX51jW5AIEmws+YcGEoLywmIHtl1ajCqCfQ1tIjgRVhYlFbYasGMvweedEqPzlifXfLf6uFwPKN82+OT/JpKhtJr7n6LTvh5EQERs9eDByNvprWy0vqb5CEUszHs4WA2zrsS7occZN6MLIQXSBlArbnWAGr879iJb6Toed/6TLgIrzDkH1mTiLmJ7ANsHoNkazcQeC+pvtfdylzd7n3Azds1+wo1X0CmM6o4vw2e31DslsnJNLHLxCWpWArSVHKrvPJS75jDUeHiyoi4qlOm3R2S8nElj94EIJ69R66Ofk0gxM2F/10Juk+z9p0UQ5jaYAU0";
        // Chose which camera to use
        vuforiaParameters.cameraDirection = VuforiaLocalizer.CameraDirection.FRONT;
        this.vuforia = ClassFactory.createVuforiaLocalizer(vuforiaParameters);
        *//*
         * Load the data set containing the VuMarks for Relic Recovery. There's only one trackable
         * in this data set: all three of the VuMarks in the game were created from this one template,
         * but differ in their instance id information.
         * @see VuMarkInstanceId
         *//*
        VuforiaTrackables relicTrackables = this.vuforia.loadTrackablesFromAsset("RelicVuMark");
        relicTemplate = relicTrackables.get(0);
        relicTemplate.setName("relicVuMarkTemplate"); // can help in debugging; otherwise not necessary

        relicTrackables.activate();*/

        // Wait until we're told to go
        waitForStart();

        telemetry.addData("Brace yourself for . . .", "BALLERINA MODE");
        sleep(3000);
        pirouetteDrive(180, 0.5, 10000, 3.0);
        // Start the logging of measured acceleration
        //imu.startAccelerationIntegration(new Position(), new Velocity(), 1000);

        telemetry.update();

        // Setup over, now run commands
        /*glyphGrabberLeft.setPosition(grabberLeftMin); // Close our grabber arms onto the glyph
        glyphGrabberRight.setPosition(grabberRightMax);*/

        // Our robot should be inside the safezone at this point and our autonomous will end
        // In the future we are going to play around with grabbing more glyphs off the field in autonomous
    }


    /*
   Function to lower the jewel arm and sense the color
   Returning true means to drive forward (direction of color sensor)
   Returning false means to drive backwards
    */
    boolean jewelRun(){
        jewelArm.setPosition(1.0);
        boolean goForward = true;
        sleep(2000);
        telemetry.addData("Red: ", jewelSensorColor.red());
        telemetry.addData("Blue: ", jewelSensorColor.blue());
        telemetry.update();
        if (jewelSensorColor.red() > jewelSensorColor.blue()) {
            // Direct ball is red
            if (TEAMCOLOR == BLUE) {
                goForward = false;
            }
            else {
                goForward = true; // This is probably redundant but it'll work
            }
        }
        //jewelArm.setPosition(0.5); // We need to measure exactly where to set the arm position after reading the values
        return goForward;
    }

    public Boolean moveSpool(double speed, int distance, double timeout) {
        spool.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        int startPos = spool.getCurrentPosition();
        double startTime = time;

        speed = Range.clip(speed, -0.2, 0.2);
        // Start the loop. Even if we're going backwards, math.abs makes sure that we can still compare to distance.
        while (opModeIsActive() && (Math.abs(spool.getCurrentPosition() - startPos) < distance)) {
            if (time > startTime + timeout) {
                telemetry.addData("Last drive stop:", "Timeout!");
                break;
            }

            spool.setPower(speed);
        }
        spool.setPower(0.0);
        spool.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        return (time < startTime + timeout);
    }

    /* SPIN-DRIVE FUNCTION
    The function in which we can drive in a direction and spin at the same time. Currently only forwards and backwards.
    I believe that adding a directionAngle parameter will solve the problem: baseAngle = targetAngle + directionAngle

    targetAngle: The angle we wish to get to.
    dampener: A double between 0 and 1 which dampens the speed of each individual motor. It is not a limit of motor power.
    timeoutDist: The maximum encoder counts we wish to hear before killing the program, it is a safeguard incase something goes wrong.
    timeout: another safeguard, but in seconds.

     */
    public Boolean pirouetteDrive(double targetAngle, double dampener, int timeoutDist, double timeout) {
        // Set the motors to measure encoder counts.
        rightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        lMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        int direction;
        int startRPos = rightMotor.getCurrentPosition();
        int startLPos = leftMotor.getCurrentPosition();
        double startTime = time;
        double currentAngle = imu.getAngularOrientation(AxesReference.EXTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES).thirdAngle;
        if ((currentAngle - targetAngle) >= 0) {
            direction = COUNTER_CLOCKWISE;
        }
        else {
            direction = CLOCKWISE;
        }
        baseAngle = currentAngle;

        dampener = Range.clip(Math.abs(dampener), 0, 1);
        // Start the loop. Even if we're going backwards, math.abs makes sure that we can still compare to distance.
        while (opModeIsActive() && (Math.abs(rightMotor.getCurrentPosition() -startRPos) < timeoutDist) && (Math.abs(leftMotor.getCurrentPosition() -startLPos) < timeoutDist)) {
            if (time > startTime + timeout) {
                telemetry.addData("Last drive stop:", "Timeout!");
                break;
            }

            Orientation orientation = imu.getAngularOrientation(AxesReference.EXTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES);
            currentAngle = orientation.thirdAngle;
            double error = ((orientation.thirdAngle > 180 ? orientation.thirdAngle - 360 : orientation.thirdAngle) - targetAngle) / (10.0);
            if (Math.abs(error) <= 1) {
                break; // We're withing 10 degrees of the end orientation
            }

            telemetry.addData("Current z orientation:", currentAngle);
            telemetry.addData("error:", error);
            telemetry.update();

            double frontRight = getMotorPower(FRONT_RIGHT, currentAngle, direction, false) * dampener;
            double backRight = getMotorPower(BACK_RIGHT, currentAngle, direction, false) * dampener;
            double frontLeft = getMotorPower(FRONT_LEFT, currentAngle, direction, false) * dampener;
            double backLeft = getMotorPower(BACK_LEFT, currentAngle, direction, false) * dampener;

            rightMotor.setPower(frontRight);
            rMotor.setPower(backRight);
            leftMotor.setPower(frontLeft);
            lMotor.setPower(backLeft);
        }

        telemetry.addData("Last drive stop:", "Loop complete!");
        rightMotor.setPower(0.0);
        rMotor.setPower(0.0);
        leftMotor.setPower(0.0);
        lMotor.setPower(0.0);

        rightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        lMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        return (time < startTime + timeout);
    }

    /*
    Drive by gyro function, drives the robot a given length keeping within a certain angle
    targetAngle: The angle we wish to stay on
    speed: The speed of the motors. Unlike last year, -speed means you go backwards.
    distance: The length we wish to travel
     */
    public Boolean gyroDrive(double targetAngle, double speed, int distance, double timeout) {
        // Set the motors to measure encoder counts.
        rightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        lMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        int startRPos = rightMotor.getCurrentPosition();
        int startLPos = leftMotor.getCurrentPosition();
        double startTime = time;

        speed = -speed;
        speed = Range.clip(speed, -1, 1);
        // Start the loop. Even if we're going backwards, math.abs makes sure that we can still compare to distance.
        while (opModeIsActive() && (Math.abs(rightMotor.getCurrentPosition() -startRPos) < distance) && (Math.abs(leftMotor.getCurrentPosition() -startLPos) < distance)) {
            if (time > startTime + timeout) {
                telemetry.addData("Last drive stop:", "Timeout!");
                break;
            }

            Orientation orientation = imu.getAngularOrientation(AxesReference.EXTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES);
            double error = ((orientation.thirdAngle > 180 ? orientation.thirdAngle - 360 : orientation.thirdAngle) - targetAngle) / (25.0);

            telemetry.addData("motorleft dist:", leftMotor.getCurrentPosition() - startLPos);
            telemetry.addData("motorright dist:", rightMotor.getCurrentPosition() - startRPos);
            telemetry.addData("Current z orientation:", orientation.thirdAngle);
            telemetry.addData("error", error);

            double right = speed + error;
            double left = speed - error;

            if (speed < 0) {
                right = Range.clip(right, -1, 1);
                left = Range.clip(left, -1, 1);
            } else {
                right = Range.clip(right, -1, 1);
                left = Range.clip(left, -1, 1);
            }

            rightMotor.setPower(right);
            rMotor.setPower(right);
            leftMotor.setPower(left);
            lMotor.setPower(left);
        }

        telemetry.addData("Last drive stop:", "Loop complete!");
        rightMotor.setPower(0.0);
        rMotor.setPower(0.0);
        leftMotor.setPower(0.0);
        lMotor.setPower(0.0);

        rightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        lMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        return (time < startTime + timeout);
    }

    boolean gyroStrafe(int direction, double speed, int distance, double timeout) {
        // Set the motors to measure encoder counts.
        rightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        lMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        int startRPos = rightMotor.getCurrentPosition();
        int startLPos = leftMotor.getCurrentPosition();
        double startTime = time;

        speed = Range.clip(Math.abs(speed), 0, 1);
        // Start the loop. Even if we're going backwards, math.abs makes sure that we can still compare to distance.
        while (opModeIsActive() && (Math.abs(rightMotor.getCurrentPosition() -startRPos) < distance) && (Math.abs(leftMotor.getCurrentPosition() -startLPos) < distance)) {
            if (time > startTime + timeout) {
                telemetry.addData("Last drive stop:", "Timeout!");
                break;
            }

            telemetry.addData("motorleft dist:", leftMotor.getCurrentPosition() - startLPos);
            telemetry.addData("motorright dist:", rightMotor.getCurrentPosition() - startRPos);

            double right = 0.0;
            double left = 0.0;

            if (direction == LEFT) {
                right = speed;
                left = -speed;
            } else {
                right = -speed;
                left = speed;
            }

            rightMotor.setPower(right);
            rMotor.setPower(left); // We're strafing, so bottom right has to be opposite of top right
            leftMotor.setPower(left); // Same for left
            lMotor.setPower(right);
        }

        telemetry.addData("Last drive stop:", "Loop complete!");
        rightMotor.setPower(0.0);
        rMotor.setPower(0.0);
        leftMotor.setPower(0.0);
        lMotor.setPower(0.0);

        rightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        lMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        return (time < startTime + timeout);
    }

    /*
    Function to turn our robot
    targetAngle is the angle we wish to turn to
    timeout is the max time we can be attempting to turn to that angle
     */
    public Boolean gyroTurn(double targetAngle, double timeout) {
        // Set the motors to measure encoder counts.
        rightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        lMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        double startTime = time;

        double speed = 0.0;

        // Start the loop. loop ends if angle is reached or time runs out
        while (opModeIsActive() && time < startTime + timeout) {
            Orientation orientation = imu.getAngularOrientation(AxesReference.EXTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES);
            double angleDiff = ((orientation.thirdAngle > 180 ? orientation.thirdAngle - 360 : orientation.thirdAngle) - targetAngle);
            telemetry.addData("Current z orientation:", orientation.thirdAngle);
            telemetry.addData("Angle difference:", angleDiff);
            telemetry.addData("Turning speed:", speed);
            double right = 0.0;
            double left = 0.0;

            if (Math.abs(angleDiff) < 5){
                break;
            }
            else if (Math.abs(angleDiff) == angleDiff) { // Make a clockwise turn
                speed = Range.clip(angleDiff/60, 0.1, TURN_SPEED);
                right = speed;
                left = -speed;
            }
            else if (Math.abs(angleDiff) != angleDiff) { // Turn counter clockwise
                speed = Range.clip(angleDiff/60, -TURN_SPEED, -0.1);
                right = -speed;
                left = speed;
            }

            rightMotor.setPower(right);
            rMotor.setPower(right);
            leftMotor.setPower(left);
            lMotor.setPower(left);
        }

        rightMotor.setPower(0.0);
        rMotor.setPower(0.0);
        leftMotor.setPower(0.0);
        lMotor.setPower(0.0);

        rightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        lMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        telemetry.addData("Last drive stop:", "Loop complete!");
        return (time < startTime + timeout);
    }

    /*
    Function find get the pictograph value at the start of autonomous
    timeout is the max amount of seconds we can be searching for the cipher. CENTER will be returned if it is not found.
    */
    private int findPictograph(double timeout) {
        double startTime = time;

        while (opModeIsActive()) {
            if (time > startTime + timeout) {
                break;
            }

            /**
             * See if any of the instances of {@link relicTemplate} are currently visible.
             * {@link RelicRecoveryVuMark} is an enum which can have the following values:
             * UNKNOWN, LEFT, CENTER, and RIGHT. When a VuMark is visible, something other than
             * UNKNOWN will be returned by {@link RelicRecoveryVuMark#from(VuforiaTrackable)}.
             */
            RelicRecoveryVuMark vuMark = RelicRecoveryVuMark.from(relicTemplate);
            if (vuMark != RelicRecoveryVuMark.UNKNOWN) {

                // Found an instance of the template.
                telemetry.addData("VuMark", "%s visible", vuMark);
                if (vuMark == RelicRecoveryVuMark.LEFT) {
                    return LEFT;
                }
                else if (vuMark == RelicRecoveryVuMark.CENTER) {
                    return CENTER;
                }
                else if (vuMark == RelicRecoveryVuMark.RIGHT) {
                    return RIGHT;
                }
            }
            else {
                telemetry.addData("VuMark", "not visible");
            }
            telemetry.update();
        }
        telemetry.addData("Cipher not found", CENTER);
        telemetry.update();
        return CENTER; // No vumark was found within the timeout period, so we'll just return center (1/3 chance of getting it right)
    }

    double getMotorPower(int wheelNumber, double angle, int rotDirection, boolean goBackwards){
        double power = 0;
        angle = Range.clip(Math.abs(angle), 0, 360); // Ensure the angle is positive and doesn't go outside the 360 degree space
        if (goBackwards){
            angle = (angle >= 180 ? angle - 180 : angle + 180); // If the angle is greater than 180,
        }
        if (rotDirection == CLOCKWISE) {
            if (wheelNumber == FRONT_RIGHT) {
                if (angle >= baseAngle && angle < baseAngle + 90) {
                    power = 0;
                } else if (angle >= baseAngle + 90 && angle < baseAngle + 180) {
                    power = pirouetteSineFunc(angle / 90 + 1.0); // result moves from 0 to -1
                } else if (angle >= baseAngle + 180 && angle < baseAngle + 270) {
                    power = -1;
                } else if (angle >= baseAngle + 270 && angle <= baseAngle + 360) { // The angle is greater than 270, we use the last variant of the sin function
                    power = pirouetteSineFunc(angle / 90); // result moves from -1 to 0
                }
            } else if (wheelNumber == BACK_RIGHT) {
                if (angle >= baseAngle && angle < baseAngle + 90) {
                    power = pirouetteSineFunc(angle / 90 - 2.0); // result moves from 0 to -1
                } else if (angle >= baseAngle + 90 && angle < baseAngle + 180) {
                    power = -1;
                } else if (angle >= baseAngle + 180 && angle < baseAngle + 270) {
                    power = pirouetteSineFunc(angle / 90 + 1.0); // result moves from -1 to 0
                } else if (angle >= baseAngle + 270 && angle <= baseAngle + 360) { // The angle is greater than 270, we use the last variant of the sin function
                    power = 0;
                }
            } else if (wheelNumber == FRONT_LEFT) {
                if (angle >= baseAngle && angle < baseAngle + 90) {
                    power = pirouetteSineFunc(angle / 90 + 1.0); // result moves from 1 to 0
                } else if (angle >= baseAngle + 90 && angle < baseAngle + 180) {
                    power = 0;
                } else if (angle >= baseAngle + 180 && angle < baseAngle + 270) {
                    power = pirouetteSineFunc(angle / 90 - 2.0); // result moves from 0 to 1
                } else if (angle >= baseAngle + 270 && angle <= baseAngle + 360) { // The angle is greater than 270, we use the last variant of the sin function
                    power = 1;
                }
            } else if (wheelNumber == BACK_LEFT) {
                if (angle >= baseAngle && angle < baseAngle + 90) {
                    power = 1;
                } else if (angle >= baseAngle + 90 && angle < baseAngle + 180) {
                    power = pirouetteSineFunc(angle / 90); // result moves from 1 to 0
                } else if (angle >= baseAngle + 180 && angle < baseAngle + 270) {
                    power = 0;
                } else if (angle >= baseAngle + 270 && angle <= baseAngle + 360) { // The angle is greater than 270, we use the last variant of the sin function
                    power = pirouetteSineFunc(angle / 90 + 1.0); // result moves from 0 to 1
                }
            }
        }
        else if (rotDirection == COUNTER_CLOCKWISE) {
            if (wheelNumber == FRONT_RIGHT) {
                if (angle >= baseAngle && angle < baseAngle + 90) {
                    power = pirouetteSineFunc(angle / 90 + 1.0); // result moves from 1 to 0
                } else if (angle >= baseAngle + 90 && angle < baseAngle + 180) {
                    power = 0;
                } else if (angle >= baseAngle + 180 && angle < baseAngle + 270) {
                    power = angle = pirouetteSineFunc(angle / 90 + 2.0); // result moves from 0 to 1
                } else if (angle >= baseAngle + 270 && angle <= baseAngle + 360) { // The angle is greater than 270, we use the last variant of the sin function
                    power = 1;
                }
            } else if (wheelNumber == BACK_RIGHT) {
                if (angle >= baseAngle && angle < baseAngle + 90) {
                    power = 1;
                } else if (angle >= baseAngle + 90 && angle < baseAngle + 180) {
                    power = pirouetteSineFunc(angle / 90); // result moves from 1 to 0
                } else if (angle >= baseAngle + 180 && angle < baseAngle + 270) {
                    power = 0;
                } else if (angle >= baseAngle + 270 && angle <= baseAngle + 360) { // The angle is greater than 270, we use the last variant of the sin function
                    power = pirouetteSineFunc(angle / 90 + 1.0); // result moves from 0 to 1
                }
            } else if (wheelNumber == FRONT_LEFT) {
                if (angle >= baseAngle && angle < baseAngle + 90) {
                    power = 0;
                } else if (angle >= baseAngle + 90 && angle < baseAngle + 180) {
                    power = pirouetteSineFunc(angle / 90 + 1.0); // result moves from 0 to -1
                } else if (angle >= baseAngle + 180 && angle < baseAngle + 270) {
                    power = -1;
                } else if (angle >= baseAngle + 270 && angle <= baseAngle + 360) { // The angle is greater than 270, we use the last variant of the sin function
                    power = pirouetteSineFunc(angle / 90); // result moves from -1 to 0
                }
            } else if (wheelNumber == BACK_LEFT) {
                if (angle >= baseAngle && angle < baseAngle + 90) {
                    power = pirouetteSineFunc(angle / 90 + 2.0); // result moves from 0 to -1
                } else if (angle >= baseAngle + 90 && angle < baseAngle + 180) {
                    power = -1;
                } else if (angle >= baseAngle + 180 && angle < baseAngle + 270) {
                    power = pirouetteSineFunc(angle / 90 + 1.0); // angle moves from -1 to 0
                } else if (angle >= baseAngle + 270 && angle <= baseAngle + 360) { // The angle is greater than 270, we use the last variant of the sin function
                    power = 0;
                }
            }
        }

        return power;
    }

    double pirouetteLinearFunc(double angle) {
        // hi
        return 0;
    }

    double pirouetteSineFunc(double x) {
        return Math.sin((pi / 2) * x);
    }
}
